{"version":3,"file":"data-table-resource.js","sourceRoot":"","sources":["../../src/tools/data-table-resource.ts"],"names":[],"mappings":"AAGA;IAEI,2BAAoB,KAAU;QAAV,UAAK,GAAL,KAAK,CAAK;IAAG,CAAC;IAElC,iCAAK,GAAL,UAAM,MAAuB,EAAE,MAAwD;QAEnF,IAAI,MAAM,GAAQ,EAAE,CAAC;QACrB,IAAI,MAAM,EAAE;YACR,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SACtC;aAAM;YACH,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,mEAAmE;SACnG;QAED,IAAI,MAAM,CAAC,MAAM,EAAE;YACf,MAAM,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBACb,IAAI,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,EAAE;oBACtC,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC3D;qBAAM;oBACH,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAC9C;YACL,CAAC,CAAC,CAAC;YACH,IAAI,MAAM,CAAC,OAAO,KAAK,KAAK,EAAE;gBAC1B,MAAM,CAAC,OAAO,EAAE,CAAC;aACpB;SACJ;QACD,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE;YAC7B,IAAI,MAAM,CAAC,KAAK,KAAK,SAAS,EAAE;gBAC5B,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;aACvD;iBAAM;gBACH,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;aACtE;SACJ;QAED,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,MAAM,CAAC,EAAf,CAAe,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iCAAK,GAAL;QAAA,iBAKC;QAJG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,UAAU,CAAC,cAAM,OAAA,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAA1B,CAA0B,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IAEP,CAAC;IACL,wBAAC;AAAD,CAAC,AA5CD,IA4CC","sourcesContent":["import { DataTableParams } from '../components/types';\n\n\nexport class DataTableResource<T> {\n\n    constructor(private items: T[]) {}\n\n    query(params: DataTableParams, filter?: (item: T, index: number, items: T[]) => boolean): Promise<T[]> {\n\n        let result: T[] = [];\n        if (filter) {\n            result = this.items.filter(filter);\n        } else {\n            result = this.items.slice(); // shallow copy to use for sorting instead of changing the original\n        }\n\n        if (params.sortBy) {\n            result.sort((a, b) => {\n                if (typeof a[params.sortBy] === 'string') {\n                    return a[params.sortBy].localeCompare(b[params.sortBy]);\n                } else {\n                    return a[params.sortBy] - b[params.sortBy];\n                }\n            });\n            if (params.sortAsc === false) {\n                result.reverse();\n            }\n        }\n        if (params.offset !== undefined) {\n            if (params.limit === undefined) {\n                result = result.slice(params.offset, result.length);\n            } else {\n                result = result.slice(params.offset, params.offset + params.limit);\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => resolve(result));\n        });\n    }\n\n    count(): Promise<number> {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => resolve(this.items.length));\n        });\n\n    }\n}\n"]}